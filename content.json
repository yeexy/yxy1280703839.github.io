{"meta":{"title":"叶小永的技术专栏","subtitle":null,"description":"技术宅，python新手","author":"叶小永","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-07-29T11:46:19.000Z","updated":"2019-07-29T11:46:19.495Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-07-29T11:46:01.000Z","updated":"2019-07-31T11:53:36.506Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-29T11:46:11.000Z","updated":"2019-07-31T11:51:14.444Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"时间模块","slug":"day20-时间模块","date":"2019-07-29T06:45:20.000Z","updated":"2019-07-31T11:56:33.377Z","comments":true,"path":"2019/07/29/day20-时间模块/","link":"","permalink":"http://yoursite.com/2019/07/29/day20-时间模块/","excerpt":"这一部分主要讲了Python中有关时间的模块。","text":"这一部分主要讲了Python中有关时间的模块。 day20-时间模块 一、time模块 1.包的使用 1)导入包中的模块 from 包名 import 模块名 from 包名.模块名 import *(或内容) 2)普通文件和包的区别 包有一个默认的py文件，文件名是&#39;__init__&#39;，不管用什么方式去导入包中的内容，这个默认文件都会被导入 2.time模块 - 提供和时间操作相关的函数 1)asctime()：获取当前时间，并且以’星期 月份 日期 时:分:秒 年份’的格式返回 2)localtime()：获取当地的当前时间，返回结构体时间对象 3)time()：获取当前时间，返回时间戳 时间戳：当前时间到格林威治时间的1970年1月1日00时00分00秒的时间差(单位是秒) 特点：a.方便对时间加密；b.可以节约存储空间 %H：24小时制的时；%I：12小时制的时；%w：星期几 4)strftime(时间格式,结构体时间对象)：将时间对象以指定的格式转换成字符串时间 5)strptime(时间字符串,时间格式)：将字符串时间转换成结构体时间对象 二、datetime模块 1.各种时间类 time类：和时、分、秒、毫秒相关的时间 date类：和年、月、日相关的时间 datetime类：和time类、date类都相关的时间 timedelta：用来时间的加减操作类","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"time","slug":"time","permalink":"http://yoursite.com/tags/time/"},{"name":"Datetime","slug":"Datetime","permalink":"http://yoursite.com/tags/Datetime/"}]},{"title":"元组字典和集合","slug":"day8-元组字典和集合","date":"2019-07-29T06:45:20.000Z","updated":"2019-08-02T12:54:47.837Z","comments":true,"path":"2019/07/29/day8-元组字典和集合/","link":"","permalink":"http://yoursite.com/2019/07/29/day8-元组字典和集合/","excerpt":"这一部分主要讲了Python中的元组、字典和集合三种数据类型。","text":"这一部分主要讲了Python中的元组、字典和集合三种数据类型。 day8-元组字典和集合 一、元组 1. 什么是元组(tuple) 容器型数据类型 特点：不可变(不支持增删改)、有序(支持下标操作) 将()作为容器标志，多个元素用,隔开。元素的要求和列表一样 2. 查询 - 和列表一样 注意：元组切片的结果还是元组 3. 相关运算 - 和列表一样 +, *, ==, !=, in/not in, len(), max(), min(), sum() tuple(序列) - 将数据转换成元组，所有的序列都可以转换成元组 4. 元组的特殊操作 单个元素的元组：在只有一个元素的元组中必须加逗号 tuple1 = (10,) 如果一个元组有多个元素，元组的括号可以省略 获取元素，通过让变量的个数和元组中的元素的个数保持一致来分别获取元组中的元素的值 1234&gt; tuple1 = (1, 2, 3)&gt; x, y, z = tuple&gt; print(x, y, z)&gt; 可以通过在某一个变量前加来获取不带的变量取完后剩下的所有元素 注意：带*的变量只能有一个，而且这个变量的结果是一个列表 123&gt; tuple2 = ('小明', 20, 3, 4, 5, 6, 7, 8)&gt; name, age, *num = tuple2&gt; 二、字典 1. 什么是字典(dict) 字典是容器型数据类型 特点：可变(支持增删改)、无序(不支持下标操作) 字典容器标志是{}；多个元素用,隔开 2. 字典中的元素 字典中的元素是键值对，以’key:value’的形式存在，而且key和value必须成对出现 键(key) - 不可变的数据，并且是唯一的(一般使用字符串作为键) 值(value) - 没有要求(和列表元素要求一样) 注意：字典保存数据，真正要存储的是值，键只是为了对不同的值进行区分而存在的 3. 查询 - 获取字典键值对中value的值 获取单个值 字典[key]：获取字典中指定key对应的值(key不存在会报错) 字典.get(key)：获取字典中key对应的值(key不存在不会报错而是返回None) 字典.get(key, 默认值)：获取字典中key对应的值(key不存在不会报错而是返回默认值) 遍历获取值 for 变量 in 字典: ​ 循环体 变量取到的是字典中所有的key 4. 字典相关操作：增/改, 删 增 - 添加键值对；改 - 修改某个key对应的值 字典[key] = 值 - 当key不存在就是增加，当key存在就是修改 删除 - 删除键值对 del 字典[key] - 删除字典中指定key对应的键值对 字典.pop(key) - 取出字典中指定key对应的值，返回取出的值 5. 字典相关运算 比较相等：==, != in/not in：key in 字典 - 判断key值是否存在字典中 len()：获取字典的长度 dict()：转换成字典类型 能转换成字典的数据：本身必须是一个序列，序列中元素还是一个小序列，而且小序列中必须只有两个元素 注意：将字典转换成列表、元组、集合时将字典的key作为元素 6. 字典相关函数 字典.clear() - 清空字典 字典.copy() - 复制字典中所有的键值对，产生一个新的字典 dict.fromkeys(序列, 值) - 创建一个字典，将序列中元素作为value，返回一个字典 如果没有值，则返回None items() - 同时获取字典中所有的key和value，以序列的形式返回，序列中的元素是(key, value)元组 keys() - 获取字典中所有的key，以序列的形式返回 values - 获取字典中所有的value，以序列的形式返回 字典.setdefault(key, value) - 添加键值对，key不存在时添加，key存在时不修改 字典.update(序列) - 用序列去更新字典，这个序列必须是字典或可以转换成字典的序列 三、集合 1. 什么是集合(set) 容器型数据类型 特点：可变(支持增删改)、无序(不支持下标操作) 将{}作为容器的标志；里面的元素用,隔开 空集合：set() 2. 集合中的元素 元素不可变：列表、字典、集合不能作为集合的元素 元素唯一：(自带去重功能)利用元素的唯一性去重 3. 集合的增删改查 查询 - 集合不能单独取出一个元素，只能通过遍历一个一个的取出所有的元素 增加 集合.add() - 在集合中添加一个元素 集合.update(序列) - 将序列中的元素添加到集合中(序列中的元素必须不可变) 删除 - 集合.remove(元素)：删除集合中指定的元素 改 - 集合不支持改操作 4. 数学集合运算 并集(|)：将两个集合中的元素合并并产生一个新的集合 交集(&amp;)：将两个集合公共的元素取出来产生一个新的集合 对称差集(^)：获取两个集合除了公共部分剩下的部分 差集(-)：(集合1-集合2)集合1除了和集合2公共的部分剩下的元素 集合1 &gt; 集合2：判断集合1中是否包含集合2 集合1 &lt; 集合2：判断集合2中是否包含集合1","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"元组","slug":"元组","permalink":"http://yoursite.com/tags/元组/"},{"name":"字典","slug":"字典","permalink":"http://yoursite.com/tags/字典/"},{"name":"集合","slug":"集合","permalink":"http://yoursite.com/tags/集合/"}]},{"title":"多线程基础","slug":"day19-多线程基础","date":"2019-07-27T06:45:20.000Z","updated":"2019-08-02T12:22:20.016Z","comments":true,"path":"2019/07/27/day19-多线程基础/","link":"","permalink":"http://yoursite.com/2019/07/27/day19-多线程基础/","excerpt":"这一部分主要讲了Python中的多线程基础，了解什么是进程，什么是线程。","text":"这一部分主要讲了Python中的多线程基础，了解什么是进程，什么是线程。 day19-多线程基础 一、多线程理论 1. 什么是进程 指系统中正在运行的一个程序 特点：每个进程是独立的，每个进程均运行在其专用且受保护的内存空间 2. 什么是线程 一个进程要想执行任务，必须得有线程(每个进程至少要有一条线程) 一个进程的所有任务都在线程中执行 线程的串行： 一个线程中任务的执行是串行的 同一时间一个线程只能执行一个任务 3. 进程和线程的比较 1)线程是cpu调用的最小单位 2)进程是cpu分配资源和调度的单位 3)一个程序可以对应多个进程，一个进程中可以有多个线程，但至少要有有一个线程 4)同一进程内的线程共享进程的资源 4. 什么是多线程 定义：一个进程中可以开启多条线程，每条线程可以并行执行不同的任务 作用：多线程技术可以提高程序的执行效率 原理： 同一时间，cpu只能处理一条线程，只有一条线程在工作 多线程并发执行，其实就是cpu快速的在多条线程之间的调度 如果cpu调度线程时间足够快，就造成了多线程并发执行的假象 二、多线程技术 1. 主线程和子线程 默认情况下，进程有一个线程，这个线程叫主线程。(主线程是自动创建的) 默认情况下所有的代码都是在主线程中执行的 程序员通过代码创建的线程都叫子线程。 2. 创建子线程 python内置的threading模块中提供了和线程操作相关的类和方法 threading模块中有个Thread类，这个类或者这个的子类的对象就是线程对象 需要子线程的时候就创建Thread类的对象 1)创建线程对象 语法：Thread(target=函数, args=实参列表) - 返回子线程对象 说明：target-必须要赋一个函数，这个函数会在子线程中调用 args-赋一个元组，元组中的元素就是调用target函数的时候需要传的参数 2)让子线程开始执行 线程对象.start()-在子线程中去调用target对应的download，并且将args中的值作为实参 3)程序的结束(进程的结束) 一个进程是否结束，看这个进程中是否每个线程都结束 线程结束：任务执行完成自然死亡、遇到exit()函数、发生异常 程序出现异常只会影响一个线程，线程中遇到exit()，线程直接结束 3. 通过创建Thread类的子类对象来创建子线程 1)声明一个类继承Thread 2)实现run方法，这个方法中的代码就是会在子线程中执行的代码 3)创建子类的线程对象 4)通过start去执行子线程中的任务 4. join()方法 线程对象.join() 其他对象 说明：这儿的其他代码会等到线程对象结束后才会执行 5. 多线程数据安全问题 通过加锁来解决数据安全问题 1)保证一个数据对应一把锁：创建锁的对象 2)在使用数据之前，加锁：锁对象.acquire() 3)数据使用完后，释放锁：锁对象.release()","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"进程","slug":"进程","permalink":"http://yoursite.com/tags/进程/"},{"name":"线程","slug":"线程","permalink":"http://yoursite.com/tags/线程/"},{"name":"多线程技术","slug":"多线程技术","permalink":"http://yoursite.com/tags/多线程技术/"}]},{"title":"网络编程","slug":"day18-网络编程","date":"2019-07-25T06:45:20.000Z","updated":"2019-08-02T12:26:32.983Z","comments":true,"path":"2019/07/25/day18-网络编程/","link":"","permalink":"http://yoursite.com/2019/07/25/day18-网络编程/","excerpt":"这一部分主要讲了Python中的网络编程技术，什么是socket套接字以及requests的使用。","text":"这一部分主要讲了Python中的网络编程技术，什么是socket套接字以及requests的使用。 day18-网络编程 一、socket服务器 1. 什么是socket socket又叫套接字，指的是实现网络通信的两端 2. 服务器套接字 1)创建套接字对象 server = socket.socket() socket(family=AF_INET, type=SOCK_STREAM) family：设置ip类型；AF_INET：ipv4；AF_INET6：ipv6 type：设置传输协议类型；SOCK_STREAM：TCP传输协议；SOCK_DGRAM：UDP传输协议 2)绑定IP和端口 server.bind((&#39;10.7.160.57&#39;, 1234)) bind(address)：绑定地址 address：元组(IP地址，端口) ip地址：通过ip地址可以确定互联网中唯一的一台计算机(字符串)，运行服务器程序的计算机的ip地址 端口：端口是用来区分同一台计算机中的不同服务，范围是0-65535，其中0-1024是著名端口，不能随便使用 3)开始监听，同时设置最大在线客户端个数(设置同时在线人数) server.listen(200) 4)让服务器一直处于启动状态(通过死循环方式) 5)接收请求，返回建立的连接和客户端的地址 connection, addr = server.accept() 注意：当代码执行到这里的时候，会阻塞线程 6)接收客户端发送的消息 re_data = connection.recv(1024) recv(一次性能够接收的最大值)：返回值是接收到的数据，类型是二进制 re_message = re_data.decode(encoding=&#39;utf-8&#39;) 二进制数据和字符串的转换 a.二进制转字符串： -str(二进制数据, encoding=’utf-8’) -二进制.decode(encoding=’utf-8’) b.字符串转二进制： -bytes(字符串, 编码方式) -字符串.encode() 7)发送消息 connection.send(&#39;hello&#39;.encode()) 8)关闭连接 connection.close() 二、socket客户端 1.客户端套接字 1)创建套接字对象 client = socket.socket() 2)直接连接服务器 client.connect((&#39;10.7.160.57&#39;, 8000)) connect((服务器地址, 服务器端口)) 3)发送消息 client.send(&#39;hello&#39;.encode()) 4)接收消息 re_data = client.recv(1024) re_message = re_data.decode(encoding=&#39;utf-8&#39;) 5)关闭连接 client.close() 三、requests的使用 1.requests requests是一个专门用来支持HTTP请求的一个第三方库 1)获取指定url对应的资源，返回时响应 response = requests.get(url) response = requests.post(url) 2)获取响应头 response.headers 3)获取内容 a.字符串格式的内容 response.text b.获取json内容 response.json() c.获取二进制内容 data = response.content","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"网络编程","slug":"网络编程","permalink":"http://yoursite.com/tags/网络编程/"},{"name":"Socket","slug":"Socket","permalink":"http://yoursite.com/tags/Socket/"},{"name":"requests","slug":"requests","permalink":"http://yoursite.com/tags/requests/"}]},{"title":"正则表达式","slug":"day17-正则表达式","date":"2019-07-23T06:45:20.000Z","updated":"2019-08-02T12:28:56.764Z","comments":true,"path":"2019/07/23/day17-正则表达式/","link":"","permalink":"http://yoursite.com/2019/07/23/day17-正则表达式/","excerpt":"这一部分主要讲了Python中正则表达式和re模块部分。","text":"这一部分主要讲了Python中正则表达式和re模块部分。 day17-正则表达式 一、正则符号 1. 什么是正则 正则是字符串匹配的一种工具，拥有自己的语法。语法中主要包含各种符号的使用 re中主要提供正则相关的方法 2. 正则语法 python中的正则表达式是写在引号中(可以是单引号也可以是双引号)，但是一般情况下会在引号前面加r(r’正则表达式’) 2.1 匹配符号 1)普通字符 除了正则中有特殊功能和特殊意义以外的其他所有的字符 普通字符在正则中表示字符本身 2) . - 匹配任意字符 正则中出现.的位置可以匹配任意字符，除了’\\n’ 一个.只能匹配一个任意字符 3) \\w - 匹配字母、数字或下划线(只针对ASCII码有效) 一个\\w只能匹配一个字符 注意：Unicode码中除了ASCII表以外的其他字符都能匹配 4) \\s - 匹配一个空白字符 空白：空格、回车、换行、制表符(\\t、\\n、\\r、\\v、\\f) 5) \\d - 匹配一个数字字符 6) \\大写字母 - 匹配非\\小写字母匹配到的内容 \\W：匹配非数字、字母、下划线字符 \\S：匹配非空白字符 \\D：匹配非数字字符 7) [] - 匹配字符集 a.普通用法 [字符集]：匹配字符集中的任意一个字符 b.表示范围的字符集 [字符1-字符2]：从字符1到字符2中的任意一个字符 注意：字符2的编码值必须大于字符1 c.反向选中 [^字符集]：选中除了字符集以外的其他任意一个字符2.2 检测符号 一个匹配符号必须对应一个具体的字符；检测符号只是对符号所在的位置进行检查，不会影响字符串长度 1) \\b - 检测是否是单词边界 单词边界：一切可以将两个单词区分开的符号都是单词边界，例如：单词开头、单词结尾、空白、标点符号等 2) ^ - 检测^所在的位置是否是字符开头 3) $ - 检测$所在的位置是否是字符串结尾 2.3 匹配次数 1) * - 匹配0次或无限次 字符*：*前的字符出现0次或无限次 2) + - 匹配1次或无限次 字符+：+前的字符出现1次或无限次 3) ? - 匹配0次或1次 字符?：?前的字符出现0次或1次 4) {}语法 {N}：匹配N次 {M,N}：匹配M到N次 {M,}：匹配至少M次 {,N}：匹配至多N次 3. 贪婪和非贪婪 *,+,?,{}对应的匹配次数是贪婪的 在匹配次数不确定的时候才有贪婪和非贪婪的分区 在匹配不确定的符号后面加?,就会变成非贪婪：*?, +?, ??, {M,N}?, {M,}?, {,N}? 贪婪：在匹配成功的前提下，尽可能多的匹配 非贪婪：在匹配成功的前提下，尽可能少的匹配 4. 分支结构 正则表达式1|正则表达式2 5. () - 分组 1)分组：将正则中的一部分看成一个整体进行操作 2)重复：添加分组后，可以在分组的后面通过’\\M’来重复前面第M个分组匹配到的结果 6. 转义字符 在正则符号前加\\，然后让符号的功能消失 独立的特殊符号是放在[]中特殊意义会自动消失，但是-,[]… 正则中的转义字符和字符串的转义字符是两回事 二、re，模块 1. 创建正则对象 - compile() 先要from re import * compile(正则表达式)：根据正则表达式创建正则对象 2. 匹配 fullmatch(正则表达式,字符串)：让整个字符串和正则表达式进行匹配 match(正则表达式,字符串)：匹配字符串开头 返回值：匹配成功是结果对象，匹配失败是None 匹配结果：1)匹配结果对应的字符串 匹配对象.group()：获取整个正则匹配到结果 匹配对象.group(N)：获取第N个分组匹配到的结果 2)获取匹配位置 匹配对象.span(group=0) 匹配对象.start(group=0) 匹配对象.end(group=0) 3)获取原字符串 匹配对象.string 3. 查找 search(正则表达式,字符串)：匹配出字符串中第一个满足正则表达式的子串，结果是匹配对象 findall(正则表达式,字符串)：获取字符串中所有满足正则表达式的子串；结果是列表，列表中元素是字符串 finditer(正则表达式,字符串)：获取字符中满足正则表达式的所有的子串；结果是迭代器，迭代器中的元素是匹配对象 4. 切割 split(正则表达式,字符串)：将字符串按照满足正则表达式的子串进行切割，返回列表 5. 替换 sub(正则表达式,字符串1,字符串2,替换次数=0)：将字符串2满足正则表达式的子串替换为字符串1，替换次数为0时就是全部替换","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"http://yoursite.com/tags/正则表达式/"},{"name":"re模块","slug":"re模块","permalink":"http://yoursite.com/tags/re模块/"}]},{"title":"内存管理和拷贝","slug":"day16-内存管理和拷贝","date":"2019-07-21T06:45:20.000Z","updated":"2019-08-02T12:30:52.748Z","comments":true,"path":"2019/07/21/day16-内存管理和拷贝/","link":"","permalink":"http://yoursite.com/2019/07/21/day16-内存管理和拷贝/","excerpt":"这一部分主要讲了Python中有关内存管理以及浅拷贝、深拷贝的问题。","text":"这一部分主要讲了Python中有关内存管理以及浅拷贝、深拷贝的问题。 day16-内存管理和拷贝 一、多继承 1. 多继承 python中的类支持多继承 class 子类(父类1,父类2,…) 多继承只能继承第一个父类的对象属性 二、运算符重载 1. 运算符 python中所有的数据类型本质都是类，所有的数据本质都是对象 在使用运算符对数据进行操作的时候，实质是在调用运算符对应的魔法方法，运算符前面的数据类型，决定了函数调用哪个类中对应的魔法方法 每个运算符都有自己固定的魔法方法，看某种类型的数据是否支持某种运算符就看这个类型中有没有实现对应的魔法方法 注意：&gt;和&lt;符号只需要重载一个，另外一个自动支持 三、内存管理 手动内存管理 内存分为栈区间和堆区间，栈区间中的内存是自动开辟自动释放的；堆里的内存需要程序员写代码申请和释放 1. 内存的开辟 python中所有的类型都是类，所以所有的数据都是对象。对象都是保存在堆区间；变量是保存在栈区间，变量中实际保存的堆中存储的数据的地址。(变量的本质就是指针) 注意：除了数字和字符串对象，其他数据都是每次需要的时候直接在堆中开辟区间。数字和字符串会先检查这个数据之前是否保存过，如果保存过就直接用之前的数据，否则才开辟新的空间。 2. 内存的释放 python中内存的释放采用的是’垃圾回收机制’自动释放 垃圾回收机制原理： 1)看一个数据是否需要销毁(回收)，就看这个对象的引用计数是否为0(引用：保存对象地址的数据) 2)如果这个对象引用计数不为0就假设当前对象消失，然后看会不会有其他对象因为它的消失引用计数变为0，如果有，就将另外一个对象也回收(循环引用释放) 注意：用一个变量给另外一个变量赋值实质上赋的是地址 ==和is的区别：==(判断的是值是否相等)；is(判读的是地址是否相等) 四、浅拷贝和深拷贝 1. 使用变量的3种情况 1)直接赋值：赋的是地址，赋完值后两个变量一模一样 2)浅拷贝：列表[:]、列表.copy()、copy.copy() 直接复制被拷贝的数据，产生一个新的地址，将新的地址赋值给变量； 如果被拷贝的对象有子对象，子对象不会被赋值 3)深拷贝：copy.deepcopy() 直接复制被拷贝的数据，产生一个新的地址，将新的地址赋值给变量； 如果被拷贝的对象有子对象，子对象也会被赋值","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"浅拷贝和深拷贝","slug":"浅拷贝和深拷贝","permalink":"http://yoursite.com/tags/浅拷贝和深拷贝/"},{"name":"内存管理机制","slug":"内存管理机制","permalink":"http://yoursite.com/tags/内存管理机制/"}]},{"title":"类和对象2","slug":"day15-类和对象2","date":"2019-07-19T06:45:20.000Z","updated":"2019-08-02T12:34:34.793Z","comments":true,"path":"2019/07/19/day15-类和对象2/","link":"","permalink":"http://yoursite.com/2019/07/19/day15-类和对象2/","excerpt":"这一部分主要讲了Python中类方法和静态方法、私有属性、getter和setter以及继承。","text":"这一部分主要讲了Python中类方法和静态方法、私有属性、getter和setter以及继承。 day15-类和对象2 一、类方法和静态方法 1. 类中的方法 1)对象方法 a.怎么声明：直接声明在类中的函数 b.怎么调用：通过对象来调用，以’对象.方法名()’方式调用 c.特点：有一个指向当前对象的默认参数self；调用的时候不需要传参 d.什么时候用：实现函数的功能需要用到对象属性，就只能用对象方法 2)类方法 a.怎么声明：声明函数前加‘@classmethod’ b.怎么调用：通过类来调用，以’类.方法名()’方式调用 c.特点：有一个默认参数cls，在通过类调用的时候不需要传参；指向当前类，类能做的事情，cls都能做 d.什么时候用：实现函数的功能不需要对象属性的前提下，需要类的字段(需要类)，就用类方法 3)静态方法 a.怎么声明：声明函数前加‘@staticmethod’ b.怎么调用：通过类来调用，以’类.方法名()’方式来调用 c.特点：没有特点，没有默认参数 d.什么时候用：实现函数的功能既不需要对象属性，也不需要类的字段，就用静态方法 二、私有化属性 1. 访问权限(其他语言中) 公开(public)：属性和方法在类的内部可以使用、可以被继承；也可以在类的外部使用 保护(protect)：属性和方法在类的内部可以使用、可以被继承；但不能在类的外部使用 私有(private)：属性和方法在类的内部可以使用；但不能被继承。也不能在类的外部使用 python中本质上所有的属性和方法都是公开的，私有化是假的私有化 2. 私有化 语法：在声明属性或方法的时候，在属性名前或方法名前加&#39;__&#39;; 注意：只能以&#39;__&#39;开头，不能以&#39;__&#39;结尾 私有化原理：只是单纯的在私有属性或方法名前加’_类名’，导致直接使用原名就使用不了属性和方法 三、getter和setter 1. 什么时候使用getter和setter 1)getter：希望获取一个属性值之前做点别的事情，就给这个属性添加getter 2)setter：希望给属性赋值之前做点别的事情，就给这个属性添加setter 2. 怎么给属性添加getter和setter 1)怎么添加getter a.在需要添加getter的属性前加一个下划线 b.在@property后面声明一个函数，函数名和去掉下划线的属性名一致，并且函数需要一个返回值表示获取属性的值 c.在外面通过不带下划线的属性名去获取对应的属性值 2)怎么添加setter a.如果想要给属性添加setter，必须先给他添加getter b.@getter名.setter后面声明函数；函数名和去掉下划线的属性名一致，这个函数不需要返回值，但是需要一个参数 c.在外面通过不带下划线的属性名去给属性赋值 四、继承 1. 什么是继承 让子类直接拥有父类的属性和方法，这个过程就是继承 2. 怎么继承 python中所有的类，默认都是继承自object(object是基类) 1)语法： class 类名(父类1，父类2，…)： ​ 类的内容 继承发生后子类直接拥有父类的所有的属性和方法(除了__slots__魔法) 3. 子类添加内容 1)添加字段和方法 直接在子类中声明新的字段或方法 2)添加对象属性 需要继承父类的__init__方法 补充：1)类中的函数的调用： 先看当前类中有没有这个方法，如果有直接调用，如果没有就看父类有没有这个方法；有的话就调用，如果没有就看父类的父类有没有这个方法…以此类推，如果找到基类都没有，程序才会报错 补充：2)super()的使用： 在子类的对象方法和类方法中都可以通过super()去调用父类的对象方法和类方法； 在子类中的静态方法中不能使用super()","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"getter和setter","slug":"getter和setter","permalink":"http://yoursite.com/tags/getter和setter/"},{"name":"继承","slug":"继承","permalink":"http://yoursite.com/tags/继承/"},{"name":"类方法和静态方法","slug":"类方法和静态方法","permalink":"http://yoursite.com/tags/类方法和静态方法/"}]},{"title":"类和对象1","slug":"day14-类和对象1","date":"2019-07-17T06:45:20.000Z","updated":"2019-08-02T12:36:51.619Z","comments":true,"path":"2019/07/17/day14-类和对象1/","link":"","permalink":"http://yoursite.com/2019/07/17/day14-类和对象1/","excerpt":"这一部分主要讲了Python中面向对象的编程思想以及方法。","text":"这一部分主要讲了Python中面向对象的编程思想以及方法。 day14-类和对象1 一、面向对象 1. 编程思想 面向过程编程：算法和逻辑 函数式编程：函数 面向对象编程：类和对象 二、类和对象 1. 什么是类，什么是对象 类就是拥有相同功能和相同属性的对象的集合：类是抽象的 对象就是类的实例：对象是具体 2. 类的声明 1)语法 class 类名： ​ 类的内容 2)说明 class：关键字 类名：程序员自己命名的；是标识符但不能是关键字(要求) a.采用驼峰式命名，并且首字母大写 b.见名知义 类的内容：包含类的说明文档、类中的函数(相同的功能)、类中的属性(相同的属性) 3. 创建对象 语法：对象 = 类() 同一个类可以创建多个对象 三、对象方法 1. 类中的函数 声明在类中的函数又叫方法，类中的方法分为三种：对象方法、类方法、静态方法 1)对象方法 直接声明在类中的函数，自带一个self参数； 特点：对象方法需要通过’对象.函数名()’的方式来调用； 通过对象调用对象方法的时候，self不需要传参；系统会自动将当前对象传给self(谁调用传给谁) 强调：不要用类去调用对象方法；失去了self的意义 四、init方法 1. 什么是init方法 __init__：是类中的一个魔法方法，在创建对象的时候会被自动调用 创建对象做的工作： 1)开辟空间，创建对象 2)用创建好的对象去调用init方法(做一些初始化的操作) 3)返回对象 五、类中的属性 1. 类中的属性：对象属性、字段 1)字段： a.声明在类中、函数的外面的变量就是类的字段 b.怎么使用：通过’类.字段’的方式去使用 c.什么时候用：属性值不会因为对象不同而不一样，这样的属性就声明成字段 对象属性： a.怎么声明：以’self.属性名=值’的方式声明在__init__方法中 b.怎么使用：通过’对象.属性名’的方式去使用 c.什么时候用：属性值会因为对象不同而不一样，这样的属性就声明成对象属性 如果init方法中除了self以外还有其他的参数，需要通过构造方法来给__init__方法传参 重写__repr__方法，来定制对象的打印格式(默认是打印对象地址)-要求返回值必须是字符串 六、对象属性的增删改查 1. 对象属性 python中对象属性支持增删改查操作 2. 查：获取对象属性的值 1)对象.属性：获取对象指定属性的值，如果属性不存在，会报错 2)getattr(对象, 属性名)：获取对象指定属性的值，如果属性不存在，会报错 3)getattr(对象,属性名,默认值)：同上，如果属性不存在，不会报错而是返回默认值 3. 增/改：给对象增加属性，或修改对象属性的值 1)对象.属性 = 值：当属性不存在就给对象添加属性，如果存在则修改属性的值 2)setattr(对象,属性名,值)：同上 4. 删：删除对象属性 1)del 对象.属性：删除对象指定的属性的值 2)delattr(对象,属性名) 注意：属性的增删改查只针对当前对象，不会作用于其他对象 slots魔法：可以通过给类的__slots__字段赋值，来约束当前类的对象最多有哪些属性 七、内置类属性 1. 什么是内置类属性 创建类的时候，系统自动为这个类提供的属性 1.__name__：类的字段，获取类的名字 2.__doc__：类的字段，获取类的说明文档 3.__class__：对象属性，通过对象来用，获取对象对应的类 4.__dict__： 类的字段，获取类中的字段(用得少) 对象属性，获取对象所有的属性和其对应的值，以字典的形式返回(用得多) 注意：如果给类的__slots__属性赋了值，那么这个类的对象就不能使用__dict__去获取所有的属性 __module__：类的字段，获取类所在的模块(类是在哪个py文件中声明的) __bases__：类的字段，获取当前类的父类","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"面向对象","slug":"面向对象","permalink":"http://yoursite.com/tags/面向对象/"}]},{"title":"异常","slug":"day13-异常","date":"2019-07-15T06:45:20.000Z","updated":"2019-08-02T12:38:28.640Z","comments":true,"path":"2019/07/15/day13-异常/","link":"","permalink":"http://yoursite.com/2019/07/15/day13-异常/","excerpt":"这一部分主要讲了Python中如何捕获异常和抛出异常。","text":"这一部分主要讲了Python中如何捕获异常和抛出异常。 day13-异常 一、异常捕获 1. 捕获异常 当程序发生异常时，默认情况下程序会崩溃，不能接着往后执行，捕获异常就是让程序发生异常时不会崩溃，能够接着执行，一般在明明知道代码可能会出现异常，但是又不能通过修改代码去避免，这个时候就可以通过异常捕获去处理异常 2. 捕获异常的语法 1)语法1：捕获所有的异常 try: ​ 代码段1 except: ​ 代码段2 try,except：关键字，固定写法 代码段1：需要捕获异常的一条或多条语句 代码段2：出现异常后需要去执行的一条或多条语句 执行过程：先执行代码段1，如果执行代码段1的时候出现异常，程序不会崩溃，而是直接执行代码段2；如果代码段1没有出现异常，不会执行代码段2 2)语法2： try: ​ 代码段1 except 异常类型: ​ 代码段2 执行过程：先执行代码段1，如果执行的时候出现异常，判断异常类型和except后面的类型是否一致，如果一致，则程序不崩溃，直接执行代码段2，如果不一致，程序直接崩溃 3)语法3： try: ​ 代码段1 except (异常类型1, 异常类型2,…): ​ 代码段2 4)语法4： try: ​ 代码段1 except 异常类型1: ​ 代码段11 except 异常类型2: ​ 代码段22 … 3. finally 捕获异常的最后可以添加一个finally，finally后面的代码段在任何时候都会执行 1)try后面的代码段没有出现异常，finally会执行 2)try后面的代码段出现异常，被捕获到，finally会执行 3)try后面的代码段出现异常，没有被捕获到，finally会执行 4. 抛出异常 让代码在某种情况下主动崩溃 raise 异常类型","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"捕获异常","slug":"捕获异常","permalink":"http://yoursite.com/tags/捕获异常/"},{"name":"抛出异常","slug":"抛出异常","permalink":"http://yoursite.com/tags/抛出异常/"}]},{"title":"文件操作和json数据","slug":"day12-文件操作和json数据","date":"2019-07-13T06:45:20.000Z","updated":"2019-08-02T12:48:02.351Z","comments":true,"path":"2019/07/13/day12-文件操作和json数据/","link":"","permalink":"http://yoursite.com/2019/07/13/day12-文件操作和json数据/","excerpt":"这一部分主要讲了Python中的文件操作以及json数据格式。","text":"这一部分主要讲了Python中的文件操作以及json数据格式。 day12-文件操作和json数据 一、文件操作 1. 数据持久化 计算机内存分为硬盘和运行内存 存储到本地文件中的数据，就是存储在硬盘中的数据，就能持久化 编程中常用的数据持久化文件： txt文件 二进制文件(图片、音频、视频、压缩文件) json文件 数据库文件(.db、.sql) plist文件 数据持久化三步走： a.需要持久化的数据保存在本地文件中 b.需要数据的时候去文件中读数据 c.数据发生改变后将最新的数据写入文件中 2. 文件操作 - 对文件内容的操作 基本步骤：打开文件；读/写操作；关闭文件 1)打开文件： open(file, mode=&#39;r&#39;, encoding=None)：打开指定文件，返回文件对象 file：字符串，需要打开的文件的路径，可以是绝对路径，也可以是相对路径 绝对路径：文件在电脑上的完整路径 相对路径：./(当前目录，当前py文件所在的目录)，可以省略 ​ ../(当前目录的上层目录) mode：字符串，决定文件的打开方式；打开方式决定了打开文件后支持的操作 ‘r’：默认值，只读，读出来的数据就是字符串类型 ‘w’：只写；只能将字符串写入文件(先删除原文件内容，再写) ‘rb/br’：二进制只读；以二进制的格式读 ‘wb/bw’：二进制只写；只能将二进制数据写入文件 ‘a’：只写；追加字符串内容(保留原文件内容) ‘ab/ba’：二进制只写；追加二进制内容(保留原文件内容) encoding：设置文件的编码方式，固定写’utf-8’；只针对文本文件有效 注意： 只有文本操作才能设置编码方式(二进制不行) 文本文件在读和写(或编码和解码)的方式必须一致 windows默认的是’gbk’ 2)操作文件： a.读操作：获取文件中的内容 文件对象.read()：获取文件中所有的内容，会返回文件中的内容 文件对象.readline()：读一行内容(从读写位置到一行结尾) b.写操作 文件对象.write(写的内容)：将指定的内容写入文件中 3)关闭文件 文件对象.close() 4)移动读写的位置(移动光标) 文件对象.seek(0)：将读写位置移动到文件开头 二、二进制文件的操作 1. 二进制文件有哪些 常见的二进制文件：图片文件、音频文件、视频文件、压缩文件等 不是只有二进制文件才支持’b’操作(rb、wb、ab)，但是二进制文件只能采用’b’操作 注意：所有带’b’的操作都不能设置encoding 2. 文件不存在 如果以读的方式打开一个不存在的文件，程序会报错 如果以写的方式打开一个不存在的文件，不会报错，而是自动创建这个文件 3. 打开文件的简写 1)语法： with open(‘文件路径’, ‘读写方式’, encoding=’编码方式’) as 文件对象：文件域(操作文件) 2)说明：以这种方式打开的文件，在文件域结束后，文件会自动关闭 三、json数据 1. 什么是json数据：满足json格式的数据 1)json格式： a.一个json有且只有一个数据 b.这个数据必须是json支持的数据类型对应的数据 2)json支持的数据类型 a.数据类型：包含所有的数字 b.字符串：使用双引号引起来的字符集，支持转义字符和编码字符 c.布尔：只有true和false两个值 d.数组：相当于python中的列表 e.字典：相当于python中的字典，但key只能是字符串 f.null：相当于python中的None，表示空 2. json转python 1)转换关系 json python 数字类型 int或float 字符串 str，双引号可能会变成单引号 布尔 bool，true-&gt;True,false-&gt;False 数组 list，内容也会跟着变 字典 dict，内容也会跟着变 null None 2)方法 json.loads(字符串)：将json格式的字符串转换成对应的python的数据 注意：字符串的内容必须是json格式的数据 3. python转json 1)转换关系 python json int/float 数字 str 字符串，单引号变双引号 bool 布尔，True-&gt;true,False-&gt;false list/tuple 数组 dict 字典 None null 2)方法 json.dumps(python数据)：将数据转换成json格式的字符串","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"文件操作","slug":"文件操作","permalink":"http://yoursite.com/tags/文件操作/"},{"name":"json","slug":"json","permalink":"http://yoursite.com/tags/json/"}]},{"title":"高阶函数","slug":"day11-高阶函数","date":"2019-07-11T06:45:20.000Z","updated":"2019-08-02T12:50:20.051Z","comments":true,"path":"2019/07/11/day11-高阶函数/","link":"","permalink":"http://yoursite.com/2019/07/11/day11-高阶函数/","excerpt":"这一部分主要讲了Python中的高阶函数、迭代器和生成器、生产式以及模块的使用。","text":"这一部分主要讲了Python中的高阶函数、迭代器和生成器、生产式以及模块的使用。 day11-高阶函数 一、函数作为变量 1. 函数调用表达式 就是调用函数的语句 普通值能做的事情函数调用表达式都可以做 2. 函数作为变量 !!python中声明函数本质就是声明一个类型是function的变量，函数名就是变量名 变量能做的事情函数都可以做 1)一个变量可以给另外一个变量赋值 2)给变量重新赋值 3)变量作为容器的元素 4)变量可以作为函数的参数 一个函数可以作为另外一个函数的参数 如果一个函数的参数也是函数，这种函数叫做实参高阶函数 sort和sorted 这两个函数是实参高阶函数，里面有个参数key要求传一个函数 key参数对应的函数是用来决定排序规则： —函数需要一个参数和一个返回值 —它的参数代表排序的序列的元素，返回值是比较对象 实参高阶函数：列表.sort()、sorted()、max()、min() 5)变量可以作为函数的返回值 一个函数的返回值如果也是一个函数，这个函数就是返回值高阶函数 二、迭代器 1. 什么是迭代器(iter) 迭代器是容器型数据类型(序列)，可变(但不支持增删改)、有序(但不支持下标操作) 保存在迭代器中的元素，只能取，且取出来后迭代器中就不再保存，也不能再往迭代器中添加元素 迭代器没有对应格式的数据，迭代器的产生只能通过：将其他序列转换成迭代器，或生成器 2. 获取迭代器中的元素 不管什么样的方式去获取迭代器中的元素，都是获取一个就会少一个 1)获取单个元素：next(迭代器) 获取迭代器中最顶部(第一个)的元素 2)遍历：一个一个取，获取迭代器中所有的元素 三、生成器 1. 什么是生成器 生成器本质就是迭代器：获取元素和迭代器一样 调用函数体中有yield关键字的函数，就可以得到一个生成器 2. yield yield只能出现在函数体中 调用有yield关键字的函数，不会再执行函数体，也不会获取返回值，而是得到一个生成器 3. 生成器怎么产生数据 看一个生成器能够产生几个数据，就看执行完生成器对应的函数会遇到几次yield，yield后面的值就是生成器能产生的数据 4. 生成器生成数据的原理 生成器不会同时将所有的元素保存起来，而是需要数据的时候临时产生数据 获取生成器元素的时候，就去执行生成器对应的函数的函数体，从前往后执行，直到遇到yield为止，并且将yield后面的值作为结果，同时保存结束位置，下次获取下一个元素的时候，接着上次结束的位置往后执行，直到遇到下一个yield，以此类推… 如果执行到函数结束都没有遇到yield，next函数会报StopIteration错误 四、生成式 1. 什么是生成式 生成式本质就是生成器 语法1： (表达式 for 变量 in 序列)：创建一个生成器 展开成生成器： def func(): ​ for 变量 in 序列: ​ yield 表达式 [表达式 for 变量 in 序列] - 将生成式对应的生成器转换成列表 语法2： (表达式 for 变量 in 序列 if 条件语句)：创建一个生成器 展开成生成器： def func(): ​ for 变量 in 序列: ​ if 条件语句： ​ yield 表达式 五、模块的使用 1. 什么是模块 在实际开发中，一个项目会分为多个模块 一个python文件就是一个模块 2. 多个模块怎么协作：导入模块 1)import 模块名：在当前模块中导入指定模块，导入后可以使用指定模块中所有的全局变量，必须以’模块名.变量’的方式去使用 2)from 模块名 import 全局变量1，全局变量2…：导入指定模块中指定的全局变量，被导入的全局变量在当前模块中可以直接使用 3)重命名： import 模块名 as 新模块名：模块重命名，通过新模块名来使用模块 from 模块名 import 全局变量1 as 新变量1，全局变量2 as 新变量2…：变量重命名 4)通配符：from 模块名 import *：导入模块中所有的全局变量，使用的时候直接用 3. 导入模块的原理 当执行导入模块的代码时，实质会执行被导入的模块对应的py文件 将不希望被别的模块执行的代码放到下面的if语句中 if __name__ == &#39;__main__&#39;","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"高阶函数","slug":"高阶函数","permalink":"http://yoursite.com/tags/高阶函数/"},{"name":"迭代器","slug":"迭代器","permalink":"http://yoursite.com/tags/迭代器/"},{"name":"生成器","slug":"生成器","permalink":"http://yoursite.com/tags/生成器/"}]},{"title":"函数02","slug":"day10-函数-02","date":"2019-07-09T06:45:20.000Z","updated":"2019-08-02T12:52:03.230Z","comments":true,"path":"2019/07/09/day10-函数-02/","link":"","permalink":"http://yoursite.com/2019/07/09/day10-函数-02/","excerpt":"这一部分主要讲了Python中的函数的返回值、匿名函数以及递归函数。","text":"这一部分主要讲了Python中的函数的返回值、匿名函数以及递归函数。 day10-函数-02 一、函数的返回值 1. 什么是返回值 概念：返回值就是函数返回给函数调用者的值 语法：返回值就是return后面的值 获取返回值：返回值就是函数调用表达式的值 2. return 1)什么是return 是一个关键字，只能出现在函数体中 2)return作用 a.结束函数：执行函数体时，一旦遇到return，函数直接结束 b.将函数内部的数据传到外部：return 需要返回的数据 说明 看一个函数的返回值是什么，就看执行函数体过程中有没有遇到return，如果遇到return，return后面的值就是函数的返回值 3)什么样的数据应该作为函数的返回值 初学者：如果执行完函数会产生新的数据，那么产生的新数据就可以返回；产生几个返回几个；return 返回值1, 返回值2 4)怎么获取函数的返回值 获取函数调用表达式的值就是获取函数的返回值 3. 函数调用过程(完整版) - 执行过程 1)回到函数调用的位置 2)传参，用实参给形参赋值 3)执行函数体 4)执行完函数体，先确定函数返回值(函数结束：a.执行完函数体的最后一条语句 b.执行过程中遇到return) 5)回到函数调用的位置(这时函数调用表达式的值才是函数的返回值)，接着往后执行 4. 函数调用过程中的内存变化 函数调用过程其实是一个压栈的过程 每次调用函数，系统都会自动在内存中专门为这个函数开辟一个内存空间，用来保存在函数中声明的变量(形参也是声明在函数中的变量)。当函数调用结束，这个内存区域会自动释放。 二、匿名函数 1. 匿名函数：本质还是函数 1)语法 函数名 = lambda 参数列表:返回值 2)lambda：关键字，固定写法 参数列表：形参列表，以’参数名1,参数名2,…,’形式 返回值：写任何有结果的表达式 3)什么时候使用匿名函数 a.函数的功能一行代码就可以实现 b.函数的功能不会重复使用 注意：匿名函数的函数体只有一条语句，且这条语句的结果就是返回值 python中三目运算符 值1 if 条件语句 else 值2：如果条件语句是True，整个表达式结果是值1，否则就是值2 三、变量的作用域 1. 什么是作用域 声明完变量后，这个变量能够作用的范围就是变量的作用域 2. 全局变量和局部变量 1)全局变量：声明在函数或者类外面的变量都是局部变量 全局变量的作用域：从声明开始到整个文件结束 循环和循环体中声明的变量也是全局变量 2)局部变量：声明在函数中的变量就是局部变量 局部变量的作用域：从声明开始到整个函数结束 3. global和nonlocal 这两个关键字只能在函数体中使用 1)global：在函数中声明一个全局变量(或去修改一个全局变量的值) global 变量名 变量名 = 值 nonlocal：在局部的局部中去修改局部变量的值 nonlocal 变量名 变量名 = 值 四、递归函数 1. 什么是递归函数：在函数中调用函数本身，这样的函数就是递归函数 循环能做的事情递归都能做 1)怎么写递归函数 第一步：声明函数(和普通函数一样) 第二步：找临界值(函数结束的条件) 第三步：找关系(假设函数的功能已经实现了，找f(n)和f(n-1)的关系) 第四步：使用f(n-1)去实现f(n)的功能 2)总结：通过for或while循环能做的事情就不要用递归函数","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"匿名函数","slug":"匿名函数","permalink":"http://yoursite.com/tags/匿名函数/"},{"name":"函数的返回值","slug":"函数的返回值","permalink":"http://yoursite.com/tags/函数的返回值/"},{"name":"递归函数","slug":"递归函数","permalink":"http://yoursite.com/tags/递归函数/"}]},{"title":"函数01","slug":"day9-函数-01","date":"2019-07-07T06:45:20.000Z","updated":"2019-08-02T12:53:46.064Z","comments":true,"path":"2019/07/07/day9-函数-01/","link":"","permalink":"http://yoursite.com/2019/07/07/day9-函数-01/","excerpt":"这一部分主要讲了Python中什么是函数、函数如何声明、函数如何调用以及函数的参数。","text":"这一部分主要讲了Python中什么是函数、函数如何声明、函数如何调用以及函数的参数。 day9-函数-01 一、函数基础 1. 什么是函数 函数就是对实现某一特定功能的代码的封装 2. 函数的分类 系统函数：系统自己定义的函数(不需要程序去实现的函数)，程序员直接可以使用 自定义函数：程序员自己实现的函数 3. 声明函数 1)语法 def 函数名(参数列表): ​ 函数体 2)说明 def：声明函数的关键字 函数名：和变量名一样，是标识符，不能是关键字(要求)； ​ PEP8命名规范(所有字母小写，多个单词用下划线隔开)； ​ 见名知义(根据名字能够大概知道函数的功能)； (), : - 固定写法 参数列表：这儿的参数又叫形参，以’变量名1,变量名2,…’形式出现；形参可以没有，也可以有多个；作用：通过形参可以将函数外面的数据传递到函数里面 函数体：实现函数功能的一条或多条语句 3)初学声明函数的过程 a.确定函数功能 b.根据功能去确定函数名 c.确定形参：看实现函数的功能需不需要从外面传数据，需要数据就对应一个参数 d.实现函数的功能 e.确定返回值 注意：声明函数的时候不会执行函数体!只有调用函数的时候才会执行函数体 4. 函数的调用 - 同一个函数可以调用多次 调用函数就是使用函数 1)语法 函数名(实参列表) 2)说明 函数名：必须是已经声明过的函数的函数名 ()：固定写法 实参列表：实参是给形参赋值的；实参是具体的值，如：数据、已赋值变量 3)函数的调用过程 第一步：回到函数声明的位置 第二步：传参-用实参给形参赋值 第三步：执行函数体 第四步：返回值 第五步：执行完函数体，回到函数调用的位置接着往后执行 二、函数的参数 1. 位置参数和关键字参数 - 针对实参 1)位置参数：调用参数的时候，让实参和形参的位置一一对应 2)关键字参数：调用函数的时候，以’形参=实参’的形式传参；位置可以乱 注意：不管使用哪种方式传参要保证每个参数都有值 如果既有位置参数，又有关键字参数，位置参数必须在关键字参数前面 2. 参数默认值(形参) 声明函数的时候可以给参数设置默认值，以’形参=值’的方式来设置 设置了默认值的参数，在调用函数的时候可以不用传参 有默认值的参数必须放在没有默认值参数的后面 3. 参数类型说明 1)赋默认值 2)以’形参:类型名’的方式说明类型 对参数类型进行说明可以引导函数调用者正确的传参 也可以让实现函数体的时候有代码提示 4. 不定长参数 1)声明函数的时候，在参数前面加*，那么这个参数就会变成不定长参数 不定长参数实质是一个元组，接收到的实参就是元组中的元素 带一个*的不定长参数，调用的时候需要使用位置参数 2)声明函数的时候，在参数前面加**，那么这个参数也会变成不定长参数 带**的不定长参数实质是一个字典，调用的时候必须使用关键字参数 注意：参数中带的参数需要放在不带\\参数的后面 带一个的需要放在放在带\\*的前面 def func(args, *kwargs): ​ pass","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"函数的声明","slug":"函数的声明","permalink":"http://yoursite.com/tags/函数的声明/"},{"name":"函数的调用","slug":"函数的调用","permalink":"http://yoursite.com/tags/函数的调用/"},{"name":"函数的参数","slug":"函数的参数","permalink":"http://yoursite.com/tags/函数的参数/"}]},{"title":"列表","slug":"day7-列表","date":"2019-07-05T06:45:20.000Z","updated":"2019-08-02T14:55:36.921Z","comments":true,"path":"2019/07/05/day7-列表/","link":"","permalink":"http://yoursite.com/2019/07/05/day7-列表/","excerpt":"这一部分主要讲了Python中的列表的运算、列表相关的函数。","text":"这一部分主要讲了Python中的列表的运算、列表相关的函数。 day7-列表 一、认识列表 1. 什么是列表(list) 列表是容器型数据类型(序列) 特点：可变(支持元素的增删改)、有序(支持下标操作) 说明：将[]作为容器，里面的元素用,隔开 2. 列表中的元素 任何类型的数据都可以作为列表的元素，如：数字、字符串、列表、字典、元组、函数等 同一个列表中的不同元素的类型可以不一样 二、增删改查 1. 查 - 获取列表中的元素 获取单个元素：列表[下标] 语法和字符串一样 获取部分元素(列表切片)：列表[开始下标:结束下标:步长] 列表切片和字符串切片语法一样，但是列表切片结果是一个列表 空列表：[] 遍历 直接遍历：通过for循环取出每一个元素 通过遍历下标去遍历列表 2. 增 - 在列表中添加元素 列表.append(元素)：在列表的最后面追加一个元素 列表.insert(下标,元素)：在列表指定的下标前面插入指定元素 3. 删除 - 删除列表中的元素 del 列表[下标]：删除列表中指定下标对应的元素；没有下标则删除整个列表 列表.remove(元素)：删除列表中第一个指定的元素 元素必须在列表中，否则会报错 列表.pop()：取出列表中最后一个元素，返回被取出的数据 列表.pop(下标)：取出列表中指定下标的元素，返回被取出的数据 4. 改 - 修改列表中某个元素的值 列表[下标] = 新值：将列表中指定下标对应的元素设置为新值 三、列表的运算 1. 数学运算：+, * 列表1 + 列表2：将两个列表中的元素合并产生一个新的列表 列表 * N：将列表中的元素重复N次产生一个新的列表 2. 比较运算：==, != 列表大小没有实际的意义，所以只关心相等和不相等 3. in / not in 元素 in 列表：判断列表中是否存在指定的元素 元素 not in 列表：判断列表中是否不存在指定的元素 4. len(序列) len()：获取指定列表中的个数 5. list(数据)：将数据转换成列表 所有的序列都可以转换成列表 将序列中的元素转换成列表元素 四、列表函数 1. 内置函数 max(序列)、min(序列)、sum(序列) max、min：序列中元素类型必须一样；序列中元素必须支持比较运算符 sum：只支持数字序列的求和 2. 列表相关函数 列表.count(元素)：统计列表中指定元素的个数 列表.extend(序列)：将序列中的元素依次添加到列表的最后 列表.index(元素)：获取列表中指定元素对应的下标(只获取第一个) 注意：元素不存在会报错 列表.reverse()：对原列表倒序，不会产生新列表 列表.sort()：将列表中元素从小到大排序 列表.sort(reverse=True)：将列表中元素从大到小排序 要求：列表的元素类型必须一样；元素支持比较运算符 列表.clear()：清空列表 列表.copy()：复制列表中的元素产生一个新的列表，跟列表[:]功能一样 注意：这是一个浅拷贝","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"列表","slug":"列表","permalink":"http://yoursite.com/tags/列表/"},{"name":"列表的函数","slug":"列表的函数","permalink":"http://yoursite.com/tags/列表的函数/"}]},{"title":"字符串","slug":"day6-字符串","date":"2019-07-03T06:45:20.000Z","updated":"2019-08-02T14:59:59.985Z","comments":true,"path":"2019/07/03/day6-字符串/","link":"","permalink":"http://yoursite.com/2019/07/03/day6-字符串/","excerpt":"这一部分主要讲了Python中的字符串和字符串的操作。","text":"这一部分主要讲了Python中的字符串和字符串的操作。 day6-字符串 一、认识字符串 1. 什么是字符串(str) 定义：字符串属于容器型数据类型，又叫序列，将引号作为容器，字符是元素 特点：不可变(字符个数和顺序都不可变)、有序(字符顺序影响值) 2. 字符串中的内容 字符串中的每个基本单元是字符；python中有字符的概念，但是没有字符对应的数据类型 1)普通字符：如，字母、数字、文字、符号 2)转义字符：在指定的符号前加\\来表示一些具有特殊功能或特殊意义的符号 \\n - 换行 \\t - 制表符 \\&#39; - 一个单引号 \\&quot; - 一个双引号 \\\\ - 一个反斜杠 3)编码字符：在\\u后加四位十六进制编码值，表示一个编码值对应的字符 4)编码：计算机存储字符的时候实质是字符对应的编码值，每个字符编码值是固定的 计算机本身只有存储数字的能力，而且存的是补码(二进制) 字符和字符编码的一一对应关系就叫编码表。常见的编码表：ASCII、Unicode python中采用的是Unicode编码，中文范围：4e00-9fa5 chr(编码值) - 获取编码值对应的字符 ord(字符) - 获取字符的编码值 5)阻止转义：在字符串的最前面加r/R可以阻止当前字符串的所有的转义字符转义 一个转义字符和一个编码字符长度都是1 二、字符串操作 1. 获取字符 获取单个字符 a.语法 字符串[下标] - 获取指定下标对应的字符 b.说明 字符串 - 可以是字符串值、字符串变量或结果是字符串的表达式 [] - 固定写法 下标 - 又叫索引，字符一旦确定，那么字符串中的每个字符位置就确定了，每个字符都会对应固定的下标来表示字符在字符中的位置 下标值有两种：0字符串长度-1、-1-字符串的长度 0对应的是第一个字符，-1对应最后一个字符 c.注意：下标不能越界 获取部分字符(字符串切片) a.语法 字符串[开始下标:结束下标:步长] - 从开始下标开始获取，每次增加步长去取下一个字符，直到获取结束下标为止 b.说明 字符串 - 字符串值或字符串变量 [] - 固定写法 开始下标，结束下标 - 范围内下标值 步长 - 整数 c.注意 结束下标对应的字符永远都取不到 当步长为正，开始下标到结束下标从前往后取，这时开始下标对应的字符必须在结束下标对应的字符的前面；否则取到的是空串 当步长为负，开始下标到结束下标从后往前取，这时开始下标对应的字符必须在结束下标对应的字符的后面；否则取到的是空串 获取部分下标可以越界 省略部分内容 a)省略步长 - 默认步长为1 字符串[开始下标:结束下标] b)省略开始下标 字符串[:结束下标:步长] / 字符串[:结束下标] 步长为正：从第一个字符开始往后取；步长为负：从最后一个字符往前取 c)省略结束下标 字符串[开始下标::步长] / 字符串[开始下标:] 步长为正：从开始下标往后取到最后一个字符；步长为负：从开始下标往前取到第一个字符 d)省略下标 字符串[::步长] / 字符串[:] 遍历字符串 a)直接遍历拿到每个字符for 变量 in 字符串: ​ 循环体 b)通过遍历下标来遍历字符串 len(字符串) - 获取字符串的长度 三、字符串运算 1. 数学运算：+, * 1)字符串1 + 字符串2 - 将两个字符串拼接在一起产生一个新的字符串 注意：字符串只能和字符串相加 2)字符串 * N - 字符串重复N次产生一个新的字符串 2. 比较运算 1)比较相等：==, != 2)比较大小：&gt;, &lt;, &lt;=, &gt;= 比较字符串中每一对字符的编码值大小，如果相等就继续比较下一对，直到一对不相等为止 应用：判断一个字符是否是大写字母，是否是小写字母，是否是中文，是否是数字等… 3. in / not in 字符串1 in 字符串2 - 判断字符串2中是否包含字符串1 字符串1 not in 字符串2 - 判断字符串2中是否不包含字符串1 4. len() len(序列) - 获取序列的长度(序列中元素的个数) 5. str(数据) - 将指定数据转换成字符串 所有的数据都可以转换成字符串；直接在数据外面加引号 6. 格式字符串：在字符串中用格式占位符来表示字符串中变化的部分 语法：包含格式占位符的字符串 % (格式字符串对应的多个数据) %s - 字符串 %d - 整数 %.Nf - 小数，N用来约束小数的位数 %c - 字符(可以将数字转换成字符) 7. 字符串相关的函数 格式：字符串.函数名() 1)对齐方式 字符串.center(宽度, 填充字符) - 居中填充 字符串.ljust(宽度, 填充字符) - 左对齐填充 字符串.rjust(宽度, 填充字符) - 右对齐填充 字符串.zfill(宽度) - 填充0 2)统计个数 字符串1.count(字符串2) - 统计字符串1中字符串2的个数 3)join()函数 字符串.join(序列) - 将序列中的元素用指定的字符串连接在一起产生一个新的字符串 注意：序列的元素必须是字符串 4)去掉空白符 字符串.lstrip() - 去掉字符串左边的空白 字符串.rstrip() - 去掉字符串右边的空白 字符串.strip() - 去掉字符串左边和右边的空白 5) 字符串的替换 字符串.replace(字符串1, 字符串2) - 将字符串中的字符串1替换为字符换2 6)字符串切割 字符串.split(字符串1) - 将字符串按照字符串1进行切割 结果是一个序列，列表中元素是多个小字符串","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"str","slug":"str","permalink":"http://yoursite.com/tags/str/"},{"name":"字符串操作","slug":"字符串操作","permalink":"http://yoursite.com/tags/字符串操作/"}]},{"title":"循环结构","slug":"day4-循环结构","date":"2019-07-01T06:45:20.000Z","updated":"2019-08-02T15:01:41.810Z","comments":true,"path":"2019/07/01/day4-循环结构/","link":"","permalink":"http://yoursite.com/2019/07/01/day4-循环结构/","excerpt":"这一部分主要讲了Python中的for、while循环结构以及continue、break关键字。","text":"这一部分主要讲了Python中的for、while循环结构以及continue、break关键字。 day4-循环结构 一、for循环 1. 什么时候使用循环 代码中需要重复执行某个操作的时候，就可以使用循环 python中有for循环和while循环 2. for循环语法 for 变量名 in 序列: ​ 循环体 a.说明 for，in - 关键字，固定写法 : - 固定写法 变量名 - 和声明变量时的变量名要求一样 序列 - 容器型数据，python常见序列有：range、字符串、列表、字典、集合、元组、迭代器、生成器 循环体 - 和for保持一个缩进的一条或多条语句，会被重读执行的代码 b.执行过程 让变量去序列中取值，一个一个的取，取完为止，每取一个值执行一次循环体 for循环的循环次数由序列中元素的个数来控制 3. range()函数 - 专门产生一定范围的数字序列 1) range(n)-产生一个0~n-1的数字序列（整数），n必须是大于0的整数 2) range(m,n)-产生m~n-1的数字序列，m和n都必须是整数，n必须大于m 3) range(m,n,step)-从m开始，每次加step，直到n-1 二、while循环 1. while循环的语法 while 条件语句: ​ 循环体 a.说明 while - 关键字 条件语句 - 和if后面的条件语句要求一样，任何有结果的表达式，除了赋值语句都可以 循环体 - 和while保持一个缩进的一条或多条语句 b.执行过程 先判断条件语句是否为True，如果是True就执行循环体；执行完循环体，再判断条件是否为True，如果为True又执行循环体；以此类推，直到条件语句结果是False，整个循环结束 2. for循环和while循环的使用 for：当循环次数确定的时候都选择for循环 while：死循环，循环次数不确定 3. 随机数 randint(m,n)-产生一个m~n的随机整数 三、循环相关的关键字 1. continue关键字 continue只能出现在循环体中；当执行循环体遇到continue时，结束当次循环，进入下次循环的判断 2. break关键字 break只能出现在循环体中；当执行循环体遇到break，整个循环直接结束 3. else关键字 1) 完整的for循环 for 变量 in 序列: ​ 循环体 else: ​ 代码块 2) 完整的while循环 while 条件语句: ​ 循环体 else: ​ 代码块 当程序自然死亡，会执行和循环相关的else中的代码块；如果循环是因为遇到break结束，就不会执行else中的代码块","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"for循环","slug":"for循环","permalink":"http://yoursite.com/tags/for循环/"},{"name":"while循环","slug":"while循环","permalink":"http://yoursite.com/tags/while循环/"}]},{"title":"运算符、数据类型和if语句","slug":"day3-运算符和数据类型","date":"2019-06-28T06:45:20.000Z","updated":"2019-08-02T15:05:19.247Z","comments":true,"path":"2019/06/28/day3-运算符和数据类型/","link":"","permalink":"http://yoursite.com/2019/06/28/day3-运算符和数据类型/","excerpt":"这一部分主要讲了Python中的的各种运算符、几种常见的数据类型和if语句。","text":"这一部分主要讲了Python中的的各种运算符、几种常见的数据类型和if语句。 day3-运算符、数据类型和if语句 一、运算符 1. 数学运算符 +，-，*，/ — 和数学中的加、减、乘、除一样 % — 取余，求余数 应用1：通过对2取余来判断一个数是偶数还是奇数 应用2：通过对10取余来获取一个数的个位数 // — 取整，求商取商的整数部分 print(5 // 2) #结果为2 ** — 求幂运算 print(9 ** 0.5) #幂运算可以用来开方 2. 比较运算符 python中有&gt;(大于), &lt;(小于), &gt;=(大于等于), &lt;=(小于等于), ==(等于), !=(不等于)几种比较运算符 所有比较运算符的的运算结果都是布尔值(True/False) python中还可以使用多个比较运算符来表示一个范围 3. 逻辑运算符 逻辑运算符有：and，or，not and(逻辑与运算)：真真为真，其他为假 应用：如果需要多个条件同时满足，这个时候条件才用and连接 or(逻辑或运算)：假假为假，其他为真 应用：如果多个条件只要有一个条件满足就可以用or将多个条件连接起来 not(逻辑非运算)：结果取反 应用：对一个条件进行否定 短路操作： and短路操作：如果and前的结果是False，不会执行and后面的语句，结果直接为False or短路操作：如果or前的结果是True，不会执行or后面的语句，结果直接为True 4. 赋值运算符 python中有=，+=，-=，/=，=，%=，//=，*= 赋值符号的左边必须是变量；复合的赋值运算符的左边必须是已经赋值过的变量 5. 运算顺序 数学运算符 &gt; 比较运算符 &gt; 逻辑运算符 &gt; 赋值运算符 数学运算符中：** &gt; *, /, //, % &gt; +, - 加()可以改变运算顺序，有()先算口号里的 二、数字类型 1. 数字类型：整型(int)、浮点型(float)、布尔(bool)、复数(complex) 整型(int)：包含所有的整数 python中整数支持二进制、八进制、十进制、十六进制 十进制： a.基数：0，1，2，3，4，5，6，7，8，9 b.进位：逢10进1 c.位权：10的n次方 d.表示方式：直接写的所有的数字都是10进制 e.转换方式：直接print打印 二进制： a.基数：0，1 b.进位：逢2进1 c.位权：2的n次方 d.表示方式：在二进制数的前面加前缀0b/0B，例如0b110 e.转换方式：bin()-把其他进制的数转换为二进制 八进制： a.基数：0，1，2，3，4，5，6，7 b.进位：逢8进1 c.位权：8的n次方 d.表示方式：在八进制数的前面加前缀0o/0O，例如0o110 e.转换方式：oct()-把其他进制的数转换为八进制 十六进制： a.基数：0，1，2，3，4，5，6，7，8，9，a/A，b/B，c/C，d/D，e/E，f/F b.进位：逢16进1 c.位权：16的n次方 d.表示方式：在十六进制数前加前缀0x/0X，例如0x110 e.转换方式：hex()-把其他进制的数转换为十六进制 浮点型(float)：所有的小数对应的类型 支持科学计数法：3e4，3e-4 布尔值(bool)：只有True和False两个值，True实质是1，False实质是0 复数(complex)：包括所有由实数和虚数组成的数字，python中用j表示虚部 python中直接支持复数运算 2. type()函数 type(数据)-返回指定数据对应的类型 3. 类型转换：类型名(数据) 将指定的数据转换为指定类型，返回新的数据 int()-转换成整型，数字转换成整型只保留整数部分；不是所有的字符串都能转换成整型，只有去掉引号后本身就是一个整数的字符串才可以 float()-转换成浮点型，数字后面加.0；只有去掉引号后本身就是一个数字的才能转换成浮点型 bool()-所有的数据都可以转换成布尔值；所有为0、为空的值会转换成False，其他都是True 三、if分支结构 1. if使用的条件 当某段代码是需要在满足某个条件的时候才会执行，这个时候就会使用if分支结构 2. 怎么使用if 语法1 if 条件语句: ​ 代码块 a.说明 if - 关键字，固定写法 条件语句 - 除了赋值语句以外的所有由结果的表达式 : - 固定写法 代码块 - 和if保持一个缩进的一条或多条语句 b.执行过程 先判断条件语句是否为True(如果结果不是布尔就先转换成布尔再判断)，如果是True就执行代码块，否则不执行，继续执行后面的代码 语法2 if 条件语句: ​ 代码块1 else: ​ 代码块2 a.说明 if - 和上面的一样 代码块1 - 和if保持一个缩进的一条或多条语句 else - 关键字，固定写法 代码块2 - 和else保持一个缩进的一条或多条语句 b.执行过程 先判断条件语句是否为True(如果不是也要布尔先转换成布尔)，如果是True就执行带买块1，否则就执行代码块2 语法3 if 条件语句1: ​ 代码块1 elif 条件语句2: ​ 代码块2 … else: ​ 代码块3 a.说明 elif - 关键字，固定写法 b.执行过程 先判断条件语句1是否为True，如果是True就执行代码块1，然后整个if结束，直接执行其他语句；如果是False，就判断条件语句2是否为True，如果为True就执行代码块2，然后整个if结束；以此类推，如果前面所有条件语句都是False，就只想else中的代码块 3. if嵌套 可以在if结构中再嵌套其他的if语句","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"运算符","slug":"运算符","permalink":"http://yoursite.com/tags/运算符/"},{"name":"数据类型","slug":"数据类型","permalink":"http://yoursite.com/tags/数据类型/"},{"name":"if语句","slug":"if语句","permalink":"http://yoursite.com/tags/if语句/"}]},{"title":"python基础语法","slug":"day2-pyhton基础语法","date":"2019-06-26T06:45:20.000Z","updated":"2019-08-02T15:11:27.290Z","comments":true,"path":"2019/06/26/day2-pyhton基础语法/","link":"","permalink":"http://yoursite.com/2019/06/26/day2-pyhton基础语法/","excerpt":"这一部分主要讲了Python中的注释、关键字、变量。","text":"这一部分主要讲了Python中的注释、关键字、变量。 day2-Python基础语法 一、基础语法 1. 注释 单行注释：开头用#来表示单行注释 多行注释：在代码块前后用3个单引号或3个双引号表示 快捷键：ctrl + / 2. 语句 一行一般只写一条语句，结尾不需要分号；需要写多行语句，之间要用分号隔开 如果语句过长需要多行显示，在换行位置前加一个\\。注意：加\\不能破坏数据 3. 行和缩进 缩进：python要求一条语句不能随意加空格或制表符 行：python要求声明函数和类的前后需要2个换行 4. 标识符 作用：是用来给变量、函数或类命名的 规范：1)由字母、数字和下划线组成；2)不能用数字做开头；3)不能是关键字 5. 关键字(又叫保留字) 定义：python保留下来有自己的特殊功能或特殊意义的一些标识符 python中关键字一共有35个 [&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;async&#39;, &#39;await&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;] 6. 常见数据及其类型 数字数据(number)：int-整型，float-浮点型 文本数据(string)：str-字符串 布尔值(bool)：True-真，False-假 以及列表(list)、字典(dict)、元组(tuple)、集合(set)、迭代器(iter)、生成器、函数(function)、自定义的类等等 7. 输入和输出函数 print()函数：在控制台输出括号里的内容 ()内可以是数据、运算表达式、变量 一个print()可以同时打印多个数据，多个数据之间用逗号隔开 input()函数：从控制台获取输入的内容，输入以回车结束。将输入的内容返回 使用value变量去获取输入的内容：value = input(&#39;请输入年龄:&#39;) 二、python变量 1. 变量 定义：程序中需要通过变量来保存数据 语法：变量名 = 值 变量名：程序员自己命名，必须是标识符，不能是关键字 规范1：所有的字母都要小写，多个单词之间用下划线隔开 规范2：见名知义，看到变量名就知道变量中保存的是什么数据 =：赋值运算符，左边必须是变量名。将右边的数据赋值给左边的变量 值：一切有结果的表达式都可作为值，如：数据、运算表达式、函数调用、已赋值过的变量 2. 用法 同时声明多个变量赋相同的值 a = b = c = 10 同时声明多个变量赋不同的值 x, y = 10, 20 变量的重新赋值 x = 100 x = 1000 声明变量、变量赋值的原理 先开辟空间存储数据，然后让变量指向指定的内存区域，重新赋值时就重新开辟一个新的空间存储数据，再让变量指向新的存储区域","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"基础语法","slug":"基础语法","permalink":"http://yoursite.com/tags/基础语法/"},{"name":"变量","slug":"变量","permalink":"http://yoursite.com/tags/变量/"}]},{"title":"markdown语法","slug":"day1-markdown语法","date":"2019-06-24T06:45:20.000Z","updated":"2019-08-02T15:12:57.328Z","comments":true,"path":"2019/06/24/day1-markdown语法/","link":"","permalink":"http://yoursite.com/2019/06/24/day1-markdown语法/","excerpt":"这一部分主要讲了如何用markdown写技术文档。","text":"这一部分主要讲了如何用markdown写技术文档。 day1-markdown语法 1. markdown标题 使用#标记，1-6个#分别对应1-6级标题 使用=标记一级标题，-标记二级标题 2. markdown段落 在文字的末尾加2个空格表示换行 在文字的末尾加1个空格表示重新开始一个段落 段落末尾加上三个以上*或-来表示分割线 3. markdown字体 文字两头加上*或_表示斜体 文字两头加上**或__表示粗体 文字两头加上***或___表示粗斜体 文字两头加上~~表示删除线 文字两头加上表示下划线 4. markdown列表 在开头使用*或+或-来表示无序列表 在开头用数字加上.来表示有序列表 列表也可以进行嵌套使用 5. markdown区块 在开头用&gt;表示区块引用 区块引用可以嵌套，&gt;&gt;表示第一层嵌套，&gt;&gt;&gt;表示第二层 区块中可以使用列表，列表中也可以使用区块 6. markdown代码 在一行代码的前后加上`表示代码 在代码开头用制表符或4个空格表示代码区块 在代码前后用分别用```也可以表示代码区块，并在第一个后面可以指定语言 7. markdown超链接 使用来完成超链接，[]中是链接名称，()填链接地址 使用&lt;&gt;来直接表示链接地址 也可以用变量来表示，文档末尾附带变量地址 8. markdown图片显示 通过来显示图片，[]填图片的名称，()填图片的绝对路径或相对路径 图片链接也可以像超链接那样对图片网址使用变量来表示 9. markdown表格 | 表头 | 表头 | 表头 | |———:|:———|:——-:|：分别表示右对齐，左对齐，居中对齐 |单元格|单元格|单元格|","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"}]}]}